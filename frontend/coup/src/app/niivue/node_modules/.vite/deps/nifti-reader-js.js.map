{
  "version": 3,
  "sources": ["../../.pnpm/fflate@0.8.2/node_modules/fflate/lib/browser.cjs", "../../.pnpm/nifti-reader-js@0.6.8/node_modules/nifti-reader-js/src/nifti-extension.ts", "../../.pnpm/nifti-reader-js@0.6.8/node_modules/nifti-reader-js/src/utilities.ts", "../../.pnpm/nifti-reader-js@0.6.8/node_modules/nifti-reader-js/src/nifti1.ts", "../../.pnpm/nifti-reader-js@0.6.8/node_modules/nifti-reader-js/src/nifti2.ts", "../../.pnpm/nifti-reader-js@0.6.8/node_modules/nifti-reader-js/src/nifti.ts"],
  "sourcesContent": ["\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n", "/*** Constructor ***/\n/**\n * The NIFTIEXTENSION constructor.\n * @constructor\n * @property {number} esize - number of bytes that form the extended header data\n * @property {number} ecode - developer group id\n * @property {ArrayBuffer} data - extension data\n * @property {boolean} littleEndian - is little endian\n * @type {Function}\n */\nexport class NIFTIEXTENSION {\n    esize: number;\n    ecode: number;\n    edata: ArrayBuffer;\n    littleEndian: boolean;\n  \n    constructor(\n      esize: number,\n      ecode: number,\n      edata: ArrayBuffer,\n      littleEndian: boolean\n    ) {\n      if (esize % 16 != 0) {\n        throw new Error(\"This does not appear to be a NIFTI extension\");\n      }\n      this.esize = esize;\n      this.ecode = ecode;\n      this.edata = edata;\n      this.littleEndian = littleEndian;\n    }\n  \n    /**\n     * Returns extension as ArrayBuffer.\n     * @returns {ArrayBuffer}\n     */\n    toArrayBuffer() {\n      let byteArray = new Uint8Array(this.esize);\n      let data = new Uint8Array(this.edata);\n      byteArray.set(data, 8);\n  \n      let view = new DataView(byteArray.buffer);\n  \n      // size of extension\n      view.setInt32(0, this.esize, this.littleEndian);\n      view.setInt32(4, this.ecode, this.littleEndian);\n  \n      return byteArray.buffer;\n    }\n  }", "import { NIFTIEXTENSION } from \"./nifti-extension\";\n\ntype TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\nexport class Utils {\n  /*** Static Pseudo-constants ***/\n\n  public static crcTable: number[] | null = null;\n  public static readonly GUNZIP_MAGIC_COOKIE1 = 31;\n  public static readonly GUNZIP_MAGIC_COOKIE2 = 139;\n\n  /*** Static methods ***/\n\n  static getStringAt(data: DataView, start: number, end: number): string {\n    var str = \"\",\n      ctr,\n      ch;\n\n    for (ctr = start; ctr < end; ctr += 1) {\n      ch = data.getUint8(ctr);\n\n      if (ch !== 0) {\n        str += String.fromCharCode(ch);\n      }\n    }\n\n    return str;\n  }\n\n  static getByteAt = function (data: DataView, start: number): number {\n    return data.getInt8(start);\n  };\n\n  static getShortAt = function (\n    data: DataView,\n    start: number,\n    littleEndian: boolean\n  ) {\n    return data.getInt16(start, littleEndian);\n  };\n\n  static getIntAt(\n    data: DataView,\n    start: number,\n    littleEndian: boolean\n  ): number {\n    return data.getInt32(start, littleEndian);\n  }\n\n  static getFloatAt(data: DataView, start: number, littleEndian: boolean) {\n    return data.getFloat32(start, littleEndian);\n  }\n\n  static getDoubleAt(data: DataView, start: number, littleEndian: boolean) {\n    return data.getFloat64(start, littleEndian);\n  }\n\n  static getLongAt(data: DataView, start: number, littleEndian: boolean) {\n    var ctr,\n      array = [],\n      value = 0;\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n      array[ctr] = Utils.getByteAt(data, start + ctr);\n    }\n\n    for (ctr = array.length - 1; ctr >= 0; ctr--) {\n      value = value * 256 + array[ctr];\n    }\n\n    return value;\n  }\n\n  static getExtensionsAt(\n    data: DataView,\n    start: number,\n    littleEndian: boolean,\n    voxOffset: number\n  ) {\n    let extensions = [];\n    let extensionByteIndex = start;\n\n    // Multiple extended header sections are allowed\n    while (extensionByteIndex < voxOffset) {\n      // assume same endianess as header until proven otherwise\n      let extensionLittleEndian = littleEndian;\n      let esize = Utils.getIntAt(data, extensionByteIndex, littleEndian);\n      if (!esize) {\n        break; // no more extensions\n      }\n\n      // check if this takes us past vox_offset\n      if (esize + extensionByteIndex > voxOffset) {\n        // check if reversing byte order gets a proper size\n        extensionLittleEndian = !extensionLittleEndian;\n        esize = Utils.getIntAt(\n          data,\n          extensionByteIndex,\n          extensionLittleEndian\n        );\n        if (esize + extensionByteIndex > voxOffset) {\n          throw new Error(\"This does not appear to be a valid NIFTI extension\");\n        }\n      }\n\n      // esize must be a positive integral multiple of 16\n      if (esize % 16 != 0) {\n        throw new Error(\"This does not appear to be a NIFTI extension\");\n      }\n\n      let ecode = Utils.getIntAt(\n        data,\n        extensionByteIndex + 4,\n        extensionLittleEndian\n      );\n      let edata = data.buffer.slice(\n        extensionByteIndex + 8,\n        extensionByteIndex + esize\n      );\n      console.log(\n        \"extensionByteIndex: \" + (extensionByteIndex + 8) + \" esize: \" + esize\n      );\n      console.log(edata);\n      let extension = new NIFTIEXTENSION(\n        esize,\n        ecode,\n        edata,\n        extensionLittleEndian\n      );\n      extensions.push(extension);\n      extensionByteIndex += esize;\n    }\n    return extensions;\n  }\n\n  static toArrayBuffer(buffer: TypedArray): ArrayBuffer {\n    var ab, view, i;\n\n    ab = new ArrayBuffer(buffer.length);\n    view = new Uint8Array(ab);\n    for (i = 0; i < buffer.length; i += 1) {\n      view[i] = buffer[i];\n    }\n    return ab;\n  }\n\n  static isString(obj: Object): boolean {\n    return typeof obj === \"string\" || obj instanceof String;\n  }\n\n  static formatNumber(\n    num: any,\n    shortFormat: boolean | undefined = undefined\n  ): number {\n    let val;\n\n    if (Utils.isString(num)) {\n      val = Number(num);\n    } else {\n      val = num;\n    }\n\n    if (shortFormat) {\n      val = val.toPrecision(5);\n    } else {\n      val = val.toPrecision(7);\n    }\n\n    return parseFloat(val);\n  }\n\n  // http://stackoverflow.com/questions/18638900/javascript-crc32\n  static makeCRCTable(): number[] {\n    let c;\n    let crcTable: number[] = [];\n    for (var n = 0; n < 256; n++) {\n      c = n;\n      for (var k = 0; k < 8; k++) {\n        c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;\n      }\n      crcTable[n] = c;\n    }\n    return crcTable;\n  }\n\n  static crc32(dataView: DataView): number {\n    if (!Utils.crcTable) {\n      Utils.crcTable = Utils.makeCRCTable();\n    }\n    const crcTable = Utils.crcTable;\n    let crc = 0 ^ -1;\n\n    for (var i = 0; i < dataView.byteLength; i++) {\n      crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xff];\n    }\n\n    return (crc ^ -1) >>> 0;\n  }\n}", "import { NIFTIEXTENSION } from \"./nifti-extension\";\nimport { Utils } from \"./utilities\";\n\n/*** Constructor ***/\n/**\n   * The NIFTI1 constructor.\n   * @constructor\n   * @property {boolean} littleEndian\n   * @property {number} dim_info\n   * @property {number[]} dims - image dimensions\n   * @property {number} intent_p1\n   * @property {number} intent_p2\n   * @property {number} intent_p3\n   * @property {number} intent_code\n   * @property {number} datatypeCode\n   * @property {number} numBitsPerVoxel\n   * @property {number} slice_start\n   * @property {number} slice_end\n   * @property {number} slice_code\n   * @property {number[]} pixDims - voxel dimensions\n   * @property {number} vox_offset\n   * @property {number} scl_slope\n   * @property {number} scl_inter\n   * @property {number} xyzt_units\n   * @property {number} cal_max\n   * @property {number} cal_min\n   * @property {number} slice_duration\n   * @property {number} toffset\n   * @property {string} description\n   * @property {string} aux_file\n   * @property {string} intent_name\n   * @property {number} qform_code\n   * @property {number} sform_code\n   * @property {number} quatern_b\n   * @property {number} quatern_c\n   * @property {number} quatern_d\n   * @property {number} quatern_x\n   * @property {number} quatern_y\n   * @property {number} quatern_z\n   * @property {Array.<Array.<number>>} affine\n   * @property {string} magic\n   * @property {boolean} isHDR - if hdr/img format\n   * @property {number[]} extensionFlag\n   * @property {number} extensionSize\n   * @property {number} extensionCode\n   * @property {nifti.NIFTIEXTENSION[]} extensions\n   * @type {Function}\n   */\n  export class NIFTI1 {\n    littleEndian = false;\n    dim_info = 0;\n    dims: number[] = [];\n    intent_p1 = 0.0;\n    intent_p2 = 0.0;\n    intent_p3 = 0.0;\n    intent_code = 0;\n    datatypeCode = 0;\n    numBitsPerVoxel = 0;\n    slice_start = 0;\n    slice_end = 0;\n    slice_code = 0;\n    pixDims: number[] = [];\n    vox_offset = 0;\n    scl_slope = 1.0;\n    scl_inter = 0.0;\n    xyzt_units = 0;\n    cal_max = 0.0;\n    cal_min = 0.0;\n    slice_duration = 0.0;\n    toffset = 0.0;\n    description = \"\";\n    aux_file = \"\";\n    intent_name = \"\";\n    qform_code = 0;\n    sform_code = 0;\n    quatern_a = 0.0;\n    quatern_b = 0.0;\n    quatern_c = 0.0;\n    quatern_d = 0.0;\n    qoffset_x = 0.0;\n    qoffset_y = 0.0;\n    qoffset_z = 0.0;\n    affine = [\n      [1, 0, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 1, 0],\n      [0, 0, 0, 1],\n    ];\n    qfac = 1;\n    quatern_R: number[][] | undefined;\n    magic = \"0\";\n    isHDR = false;\n    extensionFlag = [0, 0, 0, 0];\n    extensionSize = 0;\n    extensionCode = 0;\n    extensions: NIFTIEXTENSION[] = [];\n\n    /*** Static Pseudo-constants ***/\n\n    // datatype codes\n    public static readonly TYPE_NONE = 0;\n    public static readonly TYPE_BINARY = 1;\n    public static readonly TYPE_UINT8 = 2;\n    public static readonly TYPE_INT16 = 4;\n    public static readonly TYPE_INT32 = 8;\n    public static readonly TYPE_FLOAT32 = 16;\n    public static readonly TYPE_COMPLEX64 = 32;\n    public static readonly TYPE_FLOAT64 = 64;\n    public static readonly TYPE_RGB24 = 128;\n    public static readonly TYPE_INT8 = 256;\n    public static readonly TYPE_UINT16 = 512;\n    public static readonly TYPE_UINT32 = 768;\n    public static readonly TYPE_INT64 = 1024;\n    public static readonly TYPE_UINT64 = 1280;\n    public static readonly TYPE_FLOAT128 = 1536;\n    public static readonly TYPE_COMPLEX128 = 1792;\n    public static readonly TYPE_COMPLEX256 = 2048;\n\n    // transform codes\n    public static readonly XFORM_UNKNOWN = 0;\n    public static readonly XFORM_SCANNER_ANAT = 1;\n    public static readonly XFORM_ALIGNED_ANAT = 2;\n    public static readonly XFORM_TALAIRACH = 3;\n    public static readonly XFORM_MNI_152 = 4;\n\n    // unit codes\n    public static readonly SPATIAL_UNITS_MASK = 0x07;\n    public static readonly TEMPORAL_UNITS_MASK = 0x38;\n    public static readonly UNITS_UNKNOWN = 0;\n    public static readonly UNITS_METER = 1;\n    public static readonly UNITS_MM = 2;\n    public static readonly UNITS_MICRON = 3;\n    public static readonly UNITS_SEC = 8;\n    public static readonly UNITS_MSEC = 16;\n    public static readonly UNITS_USEC = 24;\n    public static readonly UNITS_HZ = 32;\n    public static readonly UNITS_PPM = 40;\n    public static readonly UNITS_RADS = 48;\n\n    // nifti1 codes\n    public static readonly MAGIC_COOKIE = 348;\n    public static readonly STANDARD_HEADER_SIZE = 348;\n    public static readonly MAGIC_NUMBER_LOCATION = 344;\n    public static readonly MAGIC_NUMBER = [0x6e, 0x2b, 0x31]; // n+1 (.nii)\n    public static readonly MAGIC_NUMBER2 = [0x6e, 0x69, 0x31]; // ni1 (.hdr/.img)\n    public static readonly EXTENSION_HEADER_SIZE = 8;\n\n    /*** Prototype Methods ***/\n\n    /**\n     * Reads the header data.\n     * @param {ArrayBuffer} data\n     */\n    readHeader(data: ArrayBuffer) {\n      var rawData = new DataView(data),\n        magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index;\n\n      if (magicCookieVal !== NIFTI1.MAGIC_COOKIE) {\n        // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian);\n      }\n\n      if (magicCookieVal !== NIFTI1.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n      }\n\n      this.dim_info = Utils.getByteAt(rawData, 39);\n\n      for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 40 + ctr * 2;\n        this.dims[ctr] = Utils.getShortAt(\n          rawData,\n          index,\n          this.littleEndian\n        );\n      }\n\n      this.intent_p1 = Utils.getFloatAt(rawData, 56, this.littleEndian);\n      this.intent_p2 = Utils.getFloatAt(rawData, 60, this.littleEndian);\n      this.intent_p3 = Utils.getFloatAt(rawData, 64, this.littleEndian);\n      this.intent_code = Utils.getShortAt(rawData, 68, this.littleEndian);\n\n      this.datatypeCode = Utils.getShortAt(\n        rawData,\n        70,\n        this.littleEndian\n      );\n      this.numBitsPerVoxel = Utils.getShortAt(\n        rawData,\n        72,\n        this.littleEndian\n      );\n\n      this.slice_start = Utils.getShortAt(rawData, 74, this.littleEndian);\n\n      for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 76 + ctr * 4;\n        this.pixDims[ctr] = Utils.getFloatAt(\n          rawData,\n          index,\n          this.littleEndian\n        );\n      }\n\n      this.vox_offset = Utils.getFloatAt(rawData, 108, this.littleEndian);\n\n      this.scl_slope = Utils.getFloatAt(rawData, 112, this.littleEndian);\n      this.scl_inter = Utils.getFloatAt(rawData, 116, this.littleEndian);\n\n      this.slice_end = Utils.getShortAt(rawData, 120, this.littleEndian);\n      this.slice_code = Utils.getByteAt(rawData, 122);\n\n      this.xyzt_units = Utils.getByteAt(rawData, 123);\n\n      this.cal_max = Utils.getFloatAt(rawData, 124, this.littleEndian);\n      this.cal_min = Utils.getFloatAt(rawData, 128, this.littleEndian);\n\n      this.slice_duration = Utils.getFloatAt(\n        rawData,\n        132,\n        this.littleEndian\n      );\n      this.toffset = Utils.getFloatAt(rawData, 136, this.littleEndian);\n\n      this.description = Utils.getStringAt(rawData, 148, 228);\n      this.aux_file = Utils.getStringAt(rawData, 228, 252);\n\n      this.qform_code = Utils.getShortAt(rawData, 252, this.littleEndian);\n      this.sform_code = Utils.getShortAt(rawData, 254, this.littleEndian);\n\n      this.quatern_b = Utils.getFloatAt(rawData, 256, this.littleEndian);\n      this.quatern_c = Utils.getFloatAt(rawData, 260, this.littleEndian);\n      this.quatern_d = Utils.getFloatAt(rawData, 264, this.littleEndian);\n      // Added by znshje on 27/11/2021\n      //\n      // quatern_a is a parameter in quaternion [a, b, c, d], which is required in affine calculation (METHOD 2)\n      // mentioned in the nifti1.h file\n      // It can be calculated by a = sqrt(1.0-(b*b+c*c+d*d))\n      this.quatern_a = Math.sqrt(\n        1.0 -\n          (Math.pow(this.quatern_b, 2) +\n            Math.pow(this.quatern_c, 2) +\n            Math.pow(this.quatern_d, 2))\n      );\n\n      this.qoffset_x = Utils.getFloatAt(rawData, 268, this.littleEndian);\n      this.qoffset_y = Utils.getFloatAt(rawData, 272, this.littleEndian);\n      this.qoffset_z = Utils.getFloatAt(rawData, 276, this.littleEndian);\n\n      // Added by znshje on 27/11/2021\n      //\n      /* See: https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h */\n      if ((this.qform_code < 1) && (this.sform_code < 1)) {\n        // METHOD 0 (used when both SFORM and QFORM are unknown)\n        this.affine[0][0] = this.pixDims[1];\n        this.affine[1][1] = this.pixDims[2];\n        this.affine[2][2] = this.pixDims[3];\n      }\n      if ((this.qform_code > 0) && (this.sform_code < this.qform_code)) {\n        //   METHOD 2 (used when qform_code > 0, which should be the \"normal\" case):\n        //    ---------------------------------------------------------------------\n        //    The (x,y,z) coordinates are given by the pixdim[] scales, a rotation\n        //    matrix, and a shift.  This method is intended to represent\n        //    \"scanner-anatomical\" coordinates, which are often embedded in the\n        //    image header (e.g., DICOM fields (0020,0032), (0020,0037), (0028,0030),\n        //    and (0018,0050)), and represent the nominal orientation and location of\n        //    the data.  This method can also be used to represent \"aligned\"\n        //    coordinates, which would typically result from some post-acquisition\n        //    alignment of the volume to a standard orientation (e.g., the same\n        //    subject on another day, or a rigid rotation to true anatomical\n        //    orientation from the tilted position of the subject in the scanner).\n        //    The formula for (x,y,z) in terms of header parameters and (i,j,k) is:\n        //\n        //      [ x ]   [ R11 R12 R13 ] [        pixdim[1] * i ]   [ qoffset_x ]\n        //      [ y ] = [ R21 R22 R23 ] [        pixdim[2] * j ] + [ qoffset_y ]\n        //      [ z ]   [ R31 R32 R33 ] [ qfac * pixdim[3] * k ]   [ qoffset_z ]\n        //\n        //    The qoffset_* shifts are in the NIFTI-1 header.  Note that the center\n        //    of the (i,j,k)=(0,0,0) voxel (first value in the dataset array) is\n        //    just (x,y,z)=(qoffset_x,qoffset_y,qoffset_z).\n        //\n        //    The rotation matrix R is calculated from the quatern_* parameters.\n        //    This calculation is described below.\n        //\n        //    The scaling factor qfac is either 1 or -1.  The rotation matrix R\n        //    defined by the quaternion parameters is \"proper\" (has determinant 1).\n        //    This may not fit the needs of the data; for example, if the image\n        //    grid is\n        //      i increases from Left-to-Right\n        //      j increases from Anterior-to-Posterior\n        //      k increases from Inferior-to-Superior\n        //    Then (i,j,k) is a left-handed triple.  In this example, if qfac=1,\n        //    the R matrix would have to be\n        //\n        //      [  1   0   0 ]\n        //      [  0  -1   0 ]  which is \"improper\" (determinant = -1).\n        //      [  0   0   1 ]\n        //\n        //    If we set qfac=-1, then the R matrix would be\n        //\n        //      [  1   0   0 ]\n        //      [  0  -1   0 ]  which is proper.\n        //      [  0   0  -1 ]\n        //\n        //    This R matrix is represented by quaternion [a,b,c,d] = [0,1,0,0]\n        //    (which encodes a 180 degree rotation about the x-axis).\n\n        // Define a, b, c, d for coding covenience\n        const a = this.quatern_a;\n        const b = this.quatern_b;\n        const c = this.quatern_c;\n        const d = this.quatern_d;\n\n        this.qfac = this.pixDims[0] === 0 ? 1 : this.pixDims[0];\n\n        this.quatern_R = [\n          [\n            a * a + b * b - c * c - d * d,\n            2 * b * c - 2 * a * d,\n            2 * b * d + 2 * a * c,\n          ],\n          [\n            2 * b * c + 2 * a * d,\n            a * a + c * c - b * b - d * d,\n            2 * c * d - 2 * a * b,\n          ],\n          [\n            2 * b * d - 2 * a * c,\n            2 * c * d + 2 * a * b,\n            a * a + d * d - c * c - b * b,\n          ],\n        ];\n\n        for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n          for (ctrIn = 0; ctrIn < 3; ctrIn += 1) {\n            this.affine[ctrOut][ctrIn] =\n              this.quatern_R[ctrOut][ctrIn] * this.pixDims[ctrIn + 1];\n            if (ctrIn === 2) {\n              this.affine[ctrOut][ctrIn] *= this.qfac;\n            }\n          }\n        }\n        // The last row of affine matrix is the offset vector\n        this.affine[0][3] = this.qoffset_x;\n        this.affine[1][3] = this.qoffset_y;\n        this.affine[2][3] = this.qoffset_z;\n      } else if (this.sform_code > 0) {\n        //    METHOD 3 (used when sform_code > 0):\n        //    -----------------------------------\n        //    The (x,y,z) coordinates are given by a general affine transformation\n        //    of the (i,j,k) indexes:\n        //\n        //      x = srow_x[0] * i + srow_x[1] * j + srow_x[2] * k + srow_x[3]\n        //      y = srow_y[0] * i + srow_y[1] * j + srow_y[2] * k + srow_y[3]\n        //      z = srow_z[0] * i + srow_z[1] * j + srow_z[2] * k + srow_z[3]\n        //\n        //    The srow_* vectors are in the NIFTI_1 header.  Note that no use is\n        //    made of pixdim[] in this method.\n        for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n          for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 280 + (ctrOut * 4 + ctrIn) * 4;\n            this.affine[ctrOut][ctrIn] = Utils.getFloatAt(\n              rawData,\n              index,\n              this.littleEndian\n            );\n          }\n        }\n      }\n\n      this.affine[3][0] = 0;\n      this.affine[3][1] = 0;\n      this.affine[3][2] = 0;\n      this.affine[3][3] = 1;\n\n      this.intent_name = Utils.getStringAt(rawData, 328, 344);\n      this.magic = Utils.getStringAt(rawData, 344, 348);\n\n      this.isHDR = this.magic === String.fromCharCode.apply(null, NIFTI1.MAGIC_NUMBER2);\n\n      if (rawData.byteLength > NIFTI1.MAGIC_COOKIE) {\n        this.extensionFlag[0] = Utils.getByteAt(rawData, 348);\n        this.extensionFlag[1] = Utils.getByteAt(rawData, 348 + 1);\n        this.extensionFlag[2] = Utils.getByteAt(rawData, 348 + 2);\n        this.extensionFlag[3] = Utils.getByteAt(rawData, 348 + 3);\n\n        let isExtensionCapable = true;\n        if ((!this.isHDR) && (this.vox_offset <= 352))\n          isExtensionCapable = false;\n        if (rawData.byteLength <= (352 + 16))\n          isExtensionCapable = false;\n\n        if (isExtensionCapable && this.extensionFlag[0]) {\n          // read our extensions\n          this.extensions = Utils.getExtensionsAt(\n            rawData,\n            this.getExtensionLocation(),\n            this.littleEndian,\n            this.vox_offset\n          );\n\n          // set the extensionSize and extensionCode from the first extension found\n          this.extensionSize = this.extensions[0].esize;\n          this.extensionCode = this.extensions[0].ecode;\n        }\n      }\n    }\n\n    /**\n     * Returns a formatted string of header fields.\n     * @returns {string}\n     */\n    toFormattedString(): string {\n      var fmt = Utils.formatNumber,\n        string = \"\";\n\n      string += \"Dim Info = \" + this.dim_info + \"\\n\";\n\n      string +=\n        \"Image Dimensions (1-8): \" +\n        this.dims[0] +\n        \", \" +\n        this.dims[1] +\n        \", \" +\n        this.dims[2] +\n        \", \" +\n        this.dims[3] +\n        \", \" +\n        this.dims[4] +\n        \", \" +\n        this.dims[5] +\n        \", \" +\n        this.dims[6] +\n        \", \" +\n        this.dims[7] +\n        \"\\n\";\n\n      string +=\n        \"Intent Parameters (1-3): \" +\n        this.intent_p1 +\n        \", \" +\n        this.intent_p2 +\n        \", \" +\n        this.intent_p3 +\n        \"\\n\";\n\n      string += \"Intent Code = \" + this.intent_code + \"\\n\";\n      string +=\n        \"Datatype = \" +\n        this.datatypeCode +\n        \" (\" +\n        this.getDatatypeCodeString(this.datatypeCode) +\n        \")\\n\";\n      string += \"Bits Per Voxel = \" + this.numBitsPerVoxel + \"\\n\";\n      string += \"Slice Start = \" + this.slice_start + \"\\n\";\n      string +=\n        \"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) +\n        \", \" +\n        fmt(this.pixDims[1]) +\n        \", \" +\n        fmt(this.pixDims[2]) +\n        \", \" +\n        fmt(this.pixDims[3]) +\n        \", \" +\n        fmt(this.pixDims[4]) +\n        \", \" +\n        fmt(this.pixDims[5]) +\n        \", \" +\n        fmt(this.pixDims[6]) +\n        \", \" +\n        fmt(this.pixDims[7]) +\n        \"\\n\";\n\n      string += \"Image Offset = \" + this.vox_offset + \"\\n\";\n      string +=\n        \"Data Scale:  Slope = \" +\n        fmt(this.scl_slope) +\n        \"  Intercept = \" +\n        fmt(this.scl_inter) +\n        \"\\n\";\n      string += \"Slice End = \" + this.slice_end + \"\\n\";\n      string += \"Slice Code = \" + this.slice_code + \"\\n\";\n      string +=\n        \"Units Code = \" +\n        this.xyzt_units +\n        \" (\" +\n        this.getUnitsCodeString(\n          NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units\n        ) +\n        \", \" +\n        this.getUnitsCodeString(\n          NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units\n        ) +\n        \")\\n\";\n      string +=\n        \"Display Range:  Max = \" +\n        fmt(this.cal_max) +\n        \"  Min = \" +\n        fmt(this.cal_min) +\n        \"\\n\";\n      string += \"Slice Duration = \" + this.slice_duration + \"\\n\";\n      string += \"Time Axis Shift = \" + this.toffset + \"\\n\";\n      string += 'Description: \"' + this.description + '\"\\n';\n      string += 'Auxiliary File: \"' + this.aux_file + '\"\\n';\n      string +=\n        \"Q-Form Code = \" +\n        this.qform_code +\n        \" (\" +\n        this.getTransformCodeString(this.qform_code) +\n        \")\\n\";\n      string +=\n        \"S-Form Code = \" +\n        this.sform_code +\n        \" (\" +\n        this.getTransformCodeString(this.sform_code) +\n        \")\\n\";\n      string +=\n        \"Quaternion Parameters:  \" +\n        \"b = \" +\n        fmt(this.quatern_b) +\n        \"  \" +\n        \"c = \" +\n        fmt(this.quatern_c) +\n        \"  \" +\n        \"d = \" +\n        fmt(this.quatern_d) +\n        \"\\n\";\n\n      string +=\n        \"Quaternion Offsets:  \" +\n        \"x = \" +\n        this.qoffset_x +\n        \"  \" +\n        \"y = \" +\n        this.qoffset_y +\n        \"  \" +\n        \"z = \" +\n        this.qoffset_z +\n        \"\\n\";\n\n      string +=\n        \"S-Form Parameters X: \" +\n        fmt(this.affine[0][0]) +\n        \", \" +\n        fmt(this.affine[0][1]) +\n        \", \" +\n        fmt(this.affine[0][2]) +\n        \", \" +\n        fmt(this.affine[0][3]) +\n        \"\\n\";\n\n      string +=\n        \"S-Form Parameters Y: \" +\n        fmt(this.affine[1][0]) +\n        \", \" +\n        fmt(this.affine[1][1]) +\n        \", \" +\n        fmt(this.affine[1][2]) +\n        \", \" +\n        fmt(this.affine[1][3]) +\n        \"\\n\";\n\n      string +=\n        \"S-Form Parameters Z: \" +\n        fmt(this.affine[2][0]) +\n        \", \" +\n        fmt(this.affine[2][1]) +\n        \", \" +\n        fmt(this.affine[2][2]) +\n        \", \" +\n        fmt(this.affine[2][3]) +\n        \"\\n\";\n\n      string += 'Intent Name: \"' + this.intent_name + '\"\\n';\n\n      if (this.extensionFlag[0]) {\n        string +=\n          \"Extension: Size = \" +\n          this.extensionSize +\n          \"  Code = \" +\n          this.extensionCode +\n          \"\\n\";\n      }\n\n      return string;\n    }\n\n    /**\n     * Returns a human-readable string of datatype.\n     * @param {number} code\n     * @returns {string}\n     */\n    getDatatypeCodeString = function (code: number): string {\n      if (code === NIFTI1.TYPE_UINT8) {\n        return \"1-Byte Unsigned Integer\";\n      } else if (code === NIFTI1.TYPE_INT16) {\n        return \"2-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_INT32) {\n        return \"4-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_FLOAT32) {\n        return \"4-Byte Float\";\n      } else if (code === NIFTI1.TYPE_FLOAT64) {\n        return \"8-Byte Float\";\n      } else if (code === NIFTI1.TYPE_RGB24) {\n        return \"RGB\";\n      } else if (code === NIFTI1.TYPE_INT8) {\n        return \"1-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_UINT16) {\n        return \"2-Byte Unsigned Integer\";\n      } else if (code === NIFTI1.TYPE_UINT32) {\n        return \"4-Byte Unsigned Integer\";\n      } else if (code === NIFTI1.TYPE_INT64) {\n        return \"8-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_UINT64) {\n        return \"8-Byte Unsigned Integer\";\n      } else {\n        return \"Unknown\";\n      }\n    };\n\n    /**\n     * Returns a human-readable string of transform type.\n     * @param {number} code\n     * @returns {string}\n     */\n    getTransformCodeString = function (code: number): string {\n      if (code === NIFTI1.XFORM_SCANNER_ANAT) {\n        return \"Scanner\";\n      } else if (code === NIFTI1.XFORM_ALIGNED_ANAT) {\n        return \"Aligned\";\n      } else if (code === NIFTI1.XFORM_TALAIRACH) {\n        return \"Talairach\";\n      } else if (code === NIFTI1.XFORM_MNI_152) {\n        return \"MNI\";\n      } else {\n        return \"Unknown\";\n      }\n    };\n\n    /**\n     * Returns a human-readable string of spatial and temporal units.\n     * @param {number} code\n     * @returns {string}\n     */\n    getUnitsCodeString = function (code: number): string {\n      if (code === NIFTI1.UNITS_METER) {\n        return \"Meters\";\n      } else if (code === NIFTI1.UNITS_MM) {\n        return \"Millimeters\";\n      } else if (code === NIFTI1.UNITS_MICRON) {\n        return \"Microns\";\n      } else if (code === NIFTI1.UNITS_SEC) {\n        return \"Seconds\";\n      } else if (code === NIFTI1.UNITS_MSEC) {\n        return \"Milliseconds\";\n      } else if (code === NIFTI1.UNITS_USEC) {\n        return \"Microseconds\";\n      } else if (code === NIFTI1.UNITS_HZ) {\n        return \"Hz\";\n      } else if (code === NIFTI1.UNITS_PPM) {\n        return \"PPM\";\n      } else if (code === NIFTI1.UNITS_RADS) {\n        return \"Rads\";\n      } else {\n        return \"Unknown\";\n      }\n    };\n\n    /**\n     * Returns the qform matrix.\n     * @returns {Array.<Array.<number>>}\n     */\n    getQformMat(): Array<Array<number>> {\n      return this.convertNiftiQFormToNiftiSForm(\n        this.quatern_b,\n        this.quatern_c,\n        this.quatern_d,\n        this.qoffset_x,\n        this.qoffset_y,\n        this.qoffset_z,\n        this.pixDims[1],\n        this.pixDims[2],\n        this.pixDims[3],\n        this.pixDims[0]\n      );\n    }\n\n    /**\n     * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n     * @param {number} qb\n     * @param {number} qc\n     * @param {number} qd\n     * @param {number} qx\n     * @param {number} qy\n     * @param {number} qz\n     * @param {number} dx\n     * @param {number} dy\n     * @param {number} dz\n     * @param {number} qfac\n     * @returns {Array.<Array.<number>>}\n     */\n    convertNiftiQFormToNiftiSForm(\n      qb: number,\n      qc: number,\n      qd: number,\n      qx: number,\n      qy: number,\n      qz: number,\n      dx: number,\n      dy: number,\n      dz: number,\n      qfac: number\n    ): Array<Array<number>> {\n      var R = [\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n        ],\n        a,\n        b = qb,\n        c = qc,\n        d = qd,\n        xd,\n        yd,\n        zd;\n\n      // last row is always [ 0 0 0 1 ]\n      R[3][0] = R[3][1] = R[3][2] = 0.0;\n      R[3][3] = 1.0;\n\n      // compute a parameter from b,c,d\n      a = 1.0 - (b * b + c * c + d * d);\n      if (a < 0.0000001) {\n        /* special case */\n\n        a = 1.0 / Math.sqrt(b * b + c * c + d * d);\n        b *= a;\n        c *= a;\n        d *= a; /* normalize (b,c,d) vector */\n        a = 0.0; /* a = 0 ==> 180 degree rotation */\n      } else {\n        a = Math.sqrt(a); /* angle = 2*arccos(a) */\n      }\n\n      // load rotation matrix, including scaling factors for voxel sizes\n      xd = dx > 0.0 ? dx : 1.0; /* make sure are positive */\n      yd = dy > 0.0 ? dy : 1.0;\n      zd = dz > 0.0 ? dz : 1.0;\n\n      if (qfac < 0.0) {\n        zd = -zd; /* left handedness? */\n      }\n\n      R[0][0] = (a * a + b * b - c * c - d * d) * xd;\n      R[0][1] = 2.0 * (b * c - a * d) * yd;\n      R[0][2] = 2.0 * (b * d + a * c) * zd;\n      R[1][0] = 2.0 * (b * c + a * d) * xd;\n      R[1][1] = (a * a + c * c - b * b - d * d) * yd;\n      R[1][2] = 2.0 * (c * d - a * b) * zd;\n      R[2][0] = 2.0 * (b * d - a * c) * xd;\n      R[2][1] = 2.0 * (c * d + a * b) * yd;\n      R[2][2] = (a * a + d * d - c * c - b * b) * zd;\n\n      // load offsets\n      R[0][3] = qx;\n      R[1][3] = qy;\n      R[2][3] = qz;\n\n      return R;\n    }\n\n    /**\n     * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n     * @param {Array.<Array.<number>>} R\n     * @returns {string}\n     */\n    convertNiftiSFormToNEMA(R: Array<Array<number>>): string | null {\n      var xi,\n        xj,\n        xk,\n        yi,\n        yj,\n        yk,\n        zi,\n        zj,\n        zk,\n        val,\n        detQ,\n        detP,\n        i,\n        j,\n        k,\n        p,\n        q,\n        r,\n        ibest,\n        jbest,\n        kbest,\n        pbest,\n        qbest,\n        rbest,\n        M,\n        vbest,\n        Q,\n        P,\n        iChar,\n        jChar,\n        kChar,\n        iSense,\n        jSense,\n        kSense;\n      k = 0;\n\n      Q = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n      ];\n      P = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n      ];\n\n      //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */\n\n      //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */\n\n      /* load column vectors for each (i,j,k) direction from matrix */\n\n      /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/\n\n      xi = R[0][0];\n      xj = R[0][1];\n      xk = R[0][2];\n\n      yi = R[1][0];\n      yj = R[1][1];\n      yk = R[1][2];\n\n      zi = R[2][0];\n      zj = R[2][1];\n      zk = R[2][2];\n\n      /* normalize column vectors to get unit vectors along each ijk-axis */\n\n      /* normalize i axis */\n      val = Math.sqrt(xi * xi + yi * yi + zi * zi);\n      if (val === 0.0) {\n        /* stupid input */\n        return null;\n      }\n\n      xi /= val;\n      yi /= val;\n      zi /= val;\n\n      /* normalize j axis */\n      val = Math.sqrt(xj * xj + yj * yj + zj * zj);\n      if (val === 0.0) {\n        /* stupid input */\n        return null;\n      }\n\n      xj /= val;\n      yj /= val;\n      zj /= val;\n\n      /* orthogonalize j axis to i axis, if needed */\n      val = xi * xj + yi * yj + zi * zj; /* dot product between i and j */\n      if (Math.abs(val) > 1e-4) {\n        xj -= val * xi;\n        yj -= val * yi;\n        zj -= val * zi;\n        val = Math.sqrt(xj * xj + yj * yj + zj * zj); /* must renormalize */\n        if (val === 0.0) {\n          /* j was parallel to i? */\n          return null;\n        }\n        xj /= val;\n        yj /= val;\n        zj /= val;\n      }\n\n      /* normalize k axis; if it is zero, make it the cross product i x j */\n      val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n      if (val === 0.0) {\n        xk = yi * zj - zi * yj;\n        yk = zi * xj - zj * xi;\n        zk = xi * yj - yi * xj;\n      } else {\n        xk /= val;\n        yk /= val;\n        zk /= val;\n      }\n\n      /* orthogonalize k to i */\n      val = xi * xk + yi * yk + zi * zk; /* dot product between i and k */\n      if (Math.abs(val) > 1e-4) {\n        xk -= val * xi;\n        yk -= val * yi;\n        zk -= val * zi;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {\n          /* bad */\n          return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n      }\n\n      /* orthogonalize k to j */\n      val = xj * xk + yj * yk + zj * zk; /* dot product between j and k */\n      if (Math.abs(val) > 1e-4) {\n        xk -= val * xj;\n        yk -= val * yj;\n        zk -= val * zj;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {\n          /* bad */\n          return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n      }\n\n      Q[0][0] = xi;\n      Q[0][1] = xj;\n      Q[0][2] = xk;\n      Q[1][0] = yi;\n      Q[1][1] = yj;\n      Q[1][2] = yk;\n      Q[2][0] = zi;\n      Q[2][1] = zj;\n      Q[2][2] = zk;\n\n      /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */\n\n      detQ = this.nifti_mat33_determ(Q);\n      if (detQ === 0.0) {\n        /* shouldn't happen unless user is a DUFIS */\n        return null;\n      }\n\n      /* Build and test all possible +1/-1 coordinate permutation matrices P;\n     then find the P such that the rotation matrix M=PQ is closest to the\n     identity, in the sense of M having the smallest total rotation angle. */\n\n      /* Despite the formidable looking 6 nested loops, there are\n     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */\n\n      vbest = -666.0;\n      ibest = pbest = qbest = rbest = 1;\n      jbest = 2;\n      kbest = 3;\n\n      for (i = 1; i <= 3; i += 1) {\n        /* i = column number to use for row #1 */\n        for (j = 1; j <= 3; j += 1) {\n          /* j = column number to use for row #2 */\n          if (i !== j) {\n            for (k = 1; k <= 3; k += 1) {\n              /* k = column number to use for row #3 */\n              if (!(i === k || j === k)) {\n                P[0][0] =\n                  P[0][1] =\n                  P[0][2] =\n                  P[1][0] =\n                  P[1][1] =\n                  P[1][2] =\n                  P[2][0] =\n                  P[2][1] =\n                  P[2][2] =\n                    0.0;\n                for (p = -1; p <= 1; p += 2) {\n                  /* p,q,r are -1 or +1      */\n                  for (q = -1; q <= 1; q += 2) {\n                    /* and go into rows #1,2,3 */\n                    for (r = -1; r <= 1; r += 2) {\n                      P[0][i - 1] = p;\n                      P[1][j - 1] = q;\n                      P[2][k - 1] = r;\n                      detP =\n                        this.nifti_mat33_determ(P); /* sign of permutation */\n                      if (detP * detQ > 0.0) {\n                        M = this.nifti_mat33_mul(P, Q);\n\n                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */\n                        /* we want largest trace(M) == smallest angle == M nearest to I */\n\n                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */\n                        if (val > vbest) {\n                          vbest = val;\n                          ibest = i;\n                          jbest = j;\n                          kbest = k;\n                          pbest = p;\n                          qbest = q;\n                          rbest = r;\n                        }\n                      } /* doesn't match sign of Q */\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.\n\n     The matrix P that corresponds is the best permutation approximation\n     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates\n     to the (i,j,k) axes.\n\n     For example, the first row of P (which contains pbest in column ibest)\n     determines the way the i axis points relative to the anatomical\n     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,\n     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).\n\n     So, using ibest and pbest, we can assign the output code for\n     the i axis.  Mutatis mutandis for the j and k axes, of course. */\n\n      iChar = jChar = kChar = iSense = jSense = kSense = \"\";\n\n      switch (ibest * pbest) {\n        case 1 /*i = NIFTI_L2R*/:\n          iChar = \"X\";\n          iSense = \"+\";\n          break;\n        case -1 /*i = NIFTI_R2L*/:\n          iChar = \"X\";\n          iSense = \"-\";\n          break;\n        case 2 /*i = NIFTI_P2A*/:\n          iChar = \"Y\";\n          iSense = \"+\";\n          break;\n        case -2 /*i = NIFTI_A2P*/:\n          iChar = \"Y\";\n          iSense = \"-\";\n          break;\n        case 3 /*i = NIFTI_I2S*/:\n          iChar = \"Z\";\n          iSense = \"+\";\n          break;\n        case -3 /*i = NIFTI_S2I*/:\n          iChar = \"Z\";\n          iSense = \"-\";\n          break;\n      }\n\n      switch (jbest * qbest) {\n        case 1 /*j = NIFTI_L2R*/:\n          jChar = \"X\";\n          jSense = \"+\";\n          break;\n        case -1 /*j = NIFTI_R2L*/:\n          jChar = \"X\";\n          jSense = \"-\";\n          break;\n        case 2 /*j = NIFTI_P2A*/:\n          jChar = \"Y\";\n          jSense = \"+\";\n          break;\n        case -2 /*j = NIFTI_A2P*/:\n          jChar = \"Y\";\n          jSense = \"-\";\n          break;\n        case 3 /*j = NIFTI_I2S*/:\n          jChar = \"Z\";\n          jSense = \"+\";\n          break;\n        case -3 /*j = NIFTI_S2I*/:\n          jChar = \"Z\";\n          jSense = \"-\";\n          break;\n      }\n\n      switch (kbest * rbest) {\n        case 1 /*k = NIFTI_L2R*/:\n          kChar = \"X\";\n          kSense = \"+\";\n          break;\n        case -1 /*k = NIFTI_R2L*/:\n          kChar = \"X\";\n          kSense = \"-\";\n          break;\n        case 2 /*k = NIFTI_P2A*/:\n          kChar = \"Y\";\n          kSense = \"+\";\n          break;\n        case -2 /*k = NIFTI_A2P*/:\n          kChar = \"Y\";\n          kSense = \"-\";\n          break;\n        case 3 /*k = NIFTI_I2S*/:\n          kChar = \"Z\";\n          kSense = \"+\";\n          break;\n        case -3 /*k = NIFTI_S2I*/:\n          kChar = \"Z\";\n          kSense = \"-\";\n          break;\n      }\n\n      return iChar + jChar + kChar + iSense + jSense + kSense;\n    }\n\n    nifti_mat33_mul = function (A: number[][], B: number[][]) {\n      var C = [\n          [0, 0, 0],\n          [0, 0, 0],\n          [0, 0, 0],\n        ],\n        i,\n        j;\n\n      for (i = 0; i < 3; i += 1) {\n        for (j = 0; j < 3; j += 1) {\n          C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + A[i][2] * B[2][j];\n        }\n      }\n\n      return C;\n    };\n\n    nifti_mat33_determ = function (R: number[][]) {\n      var r11, r12, r13, r21, r22, r23, r31, r32, r33;\n      /*  INPUT MATRIX:  */\n      r11 = R[0][0];\n      r12 = R[0][1];\n      r13 = R[0][2];\n      r21 = R[1][0];\n      r22 = R[1][1];\n      r23 = R[1][2];\n      r31 = R[2][0];\n      r32 = R[2][1];\n      r33 = R[2][2];\n\n      return (\n        r11 * r22 * r33 -\n        r11 * r32 * r23 -\n        r21 * r12 * r33 +\n        r21 * r32 * r13 +\n        r31 * r12 * r23 -\n        r31 * r22 * r13\n      );\n    };\n\n    /**\n     * Returns the byte index of the extension.\n     * @returns {number}\n     */\n    getExtensionLocation() {\n      return NIFTI1.MAGIC_COOKIE + 4;\n    }\n\n    /**\n     * Returns the extension size.\n     * @param {DataView} data\n     * @returns {number}\n     */\n    getExtensionSize(data: DataView) {\n      return Utils.getIntAt(\n        data,\n        this.getExtensionLocation(),\n        this.littleEndian\n      );\n    }\n\n    /**\n     * Returns the extension code.\n     * @param {DataView} data\n     * @returns {number}\n     */\n    getExtensionCode(data: DataView) {\n      return Utils.getIntAt(\n        data,\n        this.getExtensionLocation() + 4,\n        this.littleEndian\n      );\n    }\n\n    /**\n     * Adds an extension\n     * @param {NIFTIEXTENSION} extension\n     * @param {number} index\n     */\n    addExtension(extension: NIFTIEXTENSION, index = -1) {\n      if (index == -1) {\n        this.extensions.push(extension);\n      } else {\n        this.extensions.splice(index, 0, extension);\n      }\n      this.vox_offset += extension.esize;\n    }\n\n    /**\n     * Removes an extension\n     * @param {number} index\n     */\n    removeExtension(index: number) {\n      let extension = this.extensions[index];\n      if (extension) {\n        this.vox_offset -= extension.esize;\n      }\n      this.extensions.splice(index, 1);\n    }\n\n    /**\n     * Returns header as ArrayBuffer.\n     * @param {boolean} includeExtensions - should extension bytes be included\n     * @returns {ArrayBuffer}\n     */\n    toArrayBuffer(includeExtensions = false) {\n      const SHORT_SIZE = 2;\n      const FLOAT32_SIZE = 4;\n      let byteSize = 348 + 4; // + 4 for the extension bytes\n\n      // calculate necessary size\n      if (includeExtensions) {\n        for (let extension of this.extensions) {\n          byteSize += extension.esize;\n        }\n      }\n      let byteArray = new Uint8Array(byteSize);\n      let view = new DataView(byteArray.buffer);\n      // sizeof_hdr\n      view.setInt32(0, 348, this.littleEndian);\n\n      // data_type, db_name, extents, session_error, regular are not used\n\n      // dim_info\n      view.setUint8(39, this.dim_info);\n\n      // dims\n      for (let i = 0; i < 8; i++) {\n        view.setUint16(40 + SHORT_SIZE * i, this.dims[i], this.littleEndian);\n      }\n\n      // intent_p1, intent_p2, intent_p3\n      view.setFloat32(56, this.intent_p1, this.littleEndian);\n      view.setFloat32(60, this.intent_p2, this.littleEndian);\n      view.setFloat32(64, this.intent_p3, this.littleEndian);\n\n      // intent_code, datatype, bitpix, slice_start\n      view.setInt16(68, this.intent_code, this.littleEndian);\n      view.setInt16(70, this.datatypeCode, this.littleEndian);\n      view.setInt16(72, this.numBitsPerVoxel, this.littleEndian);\n      view.setInt16(74, this.slice_start, this.littleEndian);\n\n      // pixdim[8], vox_offset, scl_slope, scl_inter\n      for (let i = 0; i < 8; i++) {\n        view.setFloat32(\n          76 + FLOAT32_SIZE * i,\n          this.pixDims[i],\n          this.littleEndian\n        );\n      }\n      view.setFloat32(108, this.vox_offset, this.littleEndian);\n      view.setFloat32(112, this.scl_slope, this.littleEndian);\n      view.setFloat32(116, this.scl_inter, this.littleEndian);\n\n      // slice_end\n      view.setInt16(120, this.slice_end, this.littleEndian);\n\n      // slice_code, xyzt_units\n      view.setUint8(122, this.slice_code);\n      view.setUint8(123, this.xyzt_units);\n\n      // cal_max, cal_min, slice_duration, toffset\n      view.setFloat32(124, this.cal_max, this.littleEndian);\n      view.setFloat32(128, this.cal_min, this.littleEndian);\n      view.setFloat32(132, this.slice_duration, this.littleEndian);\n      view.setFloat32(136, this.toffset, this.littleEndian);\n\n      // glmax, glmin are unused\n\n      // descrip and aux_file\n      byteArray.set(Buffer.from(this.description), 148);\n      byteArray.set(Buffer.from(this.aux_file), 228);\n\n      // qform_code, sform_code\n      view.setInt16(252, this.qform_code, this.littleEndian);\n      view.setInt16(254, this.sform_code, this.littleEndian);\n\n      // quatern_b, quatern_c, quatern_d, qoffset_x, qoffset_y, qoffset_z, srow_x[4], srow_y[4], and srow_z[4]\n      view.setFloat32(256, this.quatern_b, this.littleEndian);\n      view.setFloat32(260, this.quatern_c, this.littleEndian);\n      view.setFloat32(264, this.quatern_d, this.littleEndian);\n      view.setFloat32(268, this.qoffset_x, this.littleEndian);\n      view.setFloat32(272, this.qoffset_y, this.littleEndian);\n      view.setFloat32(276, this.qoffset_z, this.littleEndian);\n      const flattened = this.affine.flat();\n      // we only want the first three rows\n      for (let i = 0; i < 12; i++) {\n        view.setFloat32(\n          280 + FLOAT32_SIZE * i,\n          flattened[i],\n          this.littleEndian\n        );\n      }\n\n      // intent_name and magic\n      byteArray.set(Buffer.from(this.intent_name), 328);\n      byteArray.set(Buffer.from(this.magic), 344);\n\n      // add our extension data\n      if (includeExtensions) {\n        byteArray.set(Uint8Array.from([1, 0, 0, 0]), 348);\n        let extensionByteIndex = this.getExtensionLocation();\n        for (const extension of this.extensions) {\n          view.setInt32(\n            extensionByteIndex,\n            extension.esize,\n            extension.littleEndian\n          );\n          view.setInt32(\n            extensionByteIndex + 4,\n            extension.ecode,\n            extension.littleEndian\n          );\n          byteArray.set(\n            new Uint8Array(extension.edata),\n            extensionByteIndex + 8\n          );\n          extensionByteIndex += extension.esize;\n        }\n      } else {\n        // In a .nii file, these 4 bytes will always be present\n        byteArray.set(new Uint8Array(4).fill(0), 348);\n      }\n\n      return byteArray.buffer;\n    }\n  }", "import { NIFTIEXTENSION } from \"./nifti-extension\";\nimport { NIFTI1 } from \"./nifti1\";\nimport { Utils } from \"./utilities\";\n\n/**\n * The NIFTI2 constructor.\n * @constructor\n * @property {boolean} littleEndian\n * @property {number} dim_info\n * @property {number[]} dims - image dimensions\n * @property {number} intent_p1\n * @property {number} intent_p2\n * @property {number} intent_p3\n * @property {number} intent_code\n * @property {number} datatypeCode\n * @property {number} numBitsPerVoxel\n * @property {number} slice_start\n * @property {number} slice_end\n * @property {number} slice_code\n * @property {number[]} pixDims - voxel dimensions\n * @property {number} vox_offset\n * @property {number} scl_slope\n * @property {number} scl_inter\n * @property {number} xyzt_units\n * @property {number} cal_max\n * @property {number} cal_min\n * @property {number} slice_duration\n * @property {number} toffset\n * @property {string} description\n * @property {string} aux_file\n * @property {string} intent_name\n * @property {number} qform_code\n * @property {number} sform_code\n * @property {number} quatern_b\n * @property {number} quatern_c\n * @property {number} quatern_d\n * @property {number} quatern_x\n * @property {number} quatern_y\n * @property {number} quatern_z\n * @property {Array.<Array.<number>>} affine\n * @property {string} magic\n * @property {number[]} extensionFlag\n * @property {NIFTIEXTENSION[]} extensions\n * @type {Function}\n */\nexport class NIFTI2 {\n  littleEndian = false;\n  dim_info = 0;\n  dims: number[] = [];\n  intent_p1 = 0;\n  intent_p2 = 0;\n  intent_p3 = 0;\n  intent_code = 0;\n  datatypeCode = 0;\n  numBitsPerVoxel = 0;\n  slice_start = 0;\n  slice_end = 0;\n  slice_code = 0;\n  pixDims: number[] = [];\n  vox_offset = 0;\n  scl_slope = 1;\n  scl_inter = 0;\n  xyzt_units = 0;\n  cal_max = 0;\n  cal_min = 0;\n  slice_duration = 0;\n  toffset = 0;\n  description = \"\";\n  aux_file = \"\";\n  intent_name = \"\";\n  qform_code = 0;\n  sform_code = 0;\n  quatern_b = 0;\n  quatern_c = 0;\n  quatern_d = 0;\n  qoffset_x = 0;\n  qoffset_y = 0;\n  qoffset_z = 0;\n  affine = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 1],\n  ];\n  magic = \"0\";\n  extensionFlag = [0, 0, 0, 0];\n  extensions: NIFTIEXTENSION[] = [];\n  extensionSize = 0;\n  extensionCode = 0;\n\n  /*** Static Pseudo-constants ***/\n\n  public static readonly MAGIC_COOKIE = 540;\n  public static readonly MAGIC_NUMBER_LOCATION = 4;\n  public static readonly MAGIC_NUMBER = [\n    0x6e, 0x2b, 0x32, 0, 0x0d, 0x0a, 0x1a, 0x0a,\n  ]; // n+2\\0\n  public static readonly MAGIC_NUMBER2 = [\n    0x6e, 0x69, 0x32, 0, 0x0d, 0x0a, 0x1a, 0x0a,\n  ]; // ni2\\0\n\n  /*** Prototype Methods ***/\n\n  /**\n   * Reads the header data.\n   * @param {ArrayBuffer} data\n   */\n  readHeader(data: ArrayBuffer) {\n    var rawData = new DataView(data),\n      magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian),\n      ctr,\n      ctrOut,\n      ctrIn,\n      index,\n      array;\n\n    if (magicCookieVal !== NIFTI2.MAGIC_COOKIE) {\n      // try as little endian\n      this.littleEndian = true;\n      magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n\n    if (magicCookieVal !== NIFTI2.MAGIC_COOKIE) {\n      throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n    this.magic = Utils.getStringAt(rawData, 4, 12);\n    this.datatypeCode = Utils.getShortAt(rawData, 12, this.littleEndian);\n    this.numBitsPerVoxel = Utils.getShortAt(rawData, 14, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n      index = 16 + ctr * 8;\n      this.dims[ctr] = Utils.getLongAt(rawData, index, this.littleEndian);\n    }\n\n    this.intent_p1 = Utils.getDoubleAt(rawData, 80, this.littleEndian);\n    this.intent_p2 = Utils.getDoubleAt(rawData, 88, this.littleEndian);\n    this.intent_p3 = Utils.getDoubleAt(rawData, 96, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n      index = 104 + ctr * 8;\n      this.pixDims[ctr] = Utils.getDoubleAt(rawData, index, this.littleEndian);\n    }\n\n    this.vox_offset = Utils.getLongAt(rawData, 168, this.littleEndian);\n\n    this.scl_slope = Utils.getDoubleAt(rawData, 176, this.littleEndian);\n    this.scl_inter = Utils.getDoubleAt(rawData, 184, this.littleEndian);\n\n    this.cal_max = Utils.getDoubleAt(rawData, 192, this.littleEndian);\n    this.cal_min = Utils.getDoubleAt(rawData, 200, this.littleEndian);\n\n    this.slice_duration = Utils.getDoubleAt(rawData, 208, this.littleEndian);\n\n    this.toffset = Utils.getDoubleAt(rawData, 216, this.littleEndian);\n\n    this.slice_start = Utils.getLongAt(rawData, 224, this.littleEndian);\n    this.slice_end = Utils.getLongAt(rawData, 232, this.littleEndian);\n\n    this.description = Utils.getStringAt(rawData, 240, 240 + 80);\n    this.aux_file = Utils.getStringAt(rawData, 320, 320 + 24);\n\n    this.qform_code = Utils.getIntAt(rawData, 344, this.littleEndian);\n    this.sform_code = Utils.getIntAt(rawData, 348, this.littleEndian);\n\n    this.quatern_b = Utils.getDoubleAt(rawData, 352, this.littleEndian);\n    this.quatern_c = Utils.getDoubleAt(rawData, 360, this.littleEndian);\n    this.quatern_d = Utils.getDoubleAt(rawData, 368, this.littleEndian);\n    this.qoffset_x = Utils.getDoubleAt(rawData, 376, this.littleEndian);\n    this.qoffset_y = Utils.getDoubleAt(rawData, 384, this.littleEndian);\n    this.qoffset_z = Utils.getDoubleAt(rawData, 392, this.littleEndian);\n\n    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n      for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n        index = 400 + (ctrOut * 4 + ctrIn) * 8;\n        this.affine[ctrOut][ctrIn] = Utils.getDoubleAt(\n          rawData,\n          index,\n          this.littleEndian\n        );\n      }\n    }\n\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n\n    this.slice_code = Utils.getIntAt(rawData, 496, this.littleEndian);\n    this.xyzt_units = Utils.getIntAt(rawData, 500, this.littleEndian);\n    this.intent_code = Utils.getIntAt(rawData, 504, this.littleEndian);\n    this.intent_name = Utils.getStringAt(rawData, 508, 508 + 16);\n\n    this.dim_info = Utils.getByteAt(rawData, 524);\n\n    if (rawData.byteLength > NIFTI2.MAGIC_COOKIE) {\n      this.extensionFlag[0] = Utils.getByteAt(rawData, 540);\n      this.extensionFlag[1] = Utils.getByteAt(rawData, 540 + 1);\n      this.extensionFlag[2] = Utils.getByteAt(rawData, 540 + 2);\n      this.extensionFlag[3] = Utils.getByteAt(rawData, 540 + 3);\n\n      if (this.extensionFlag[0]) {\n        // read our extensions\n        this.extensions = Utils.getExtensionsAt(\n          rawData,\n          this.getExtensionLocation(),\n          this.littleEndian,\n          this.vox_offset\n        );\n\n        // set the extensionSize and extensionCode from the first extension found\n        this.extensionSize = this.extensions[0].esize;\n        this.extensionCode = this.extensions[0].ecode;\n      }\n    }\n  }\n\n  /**\n   * Returns a formatted string of header fields.\n   * @returns {string}\n   */\n  toFormattedString() {\n    var fmt = Utils.formatNumber,\n      string = \"\";\n\n    string +=\n      \"Datatype = \" +\n      +this.datatypeCode +\n      \" (\" +\n      this.getDatatypeCodeString(this.datatypeCode) +\n      \")\\n\";\n    string += \"Bits Per Voxel = \" + \" = \" + this.numBitsPerVoxel + \"\\n\";\n    string +=\n      \"Image Dimensions\" +\n      \" (1-8): \" +\n      this.dims[0] +\n      \", \" +\n      this.dims[1] +\n      \", \" +\n      this.dims[2] +\n      \", \" +\n      this.dims[3] +\n      \", \" +\n      this.dims[4] +\n      \", \" +\n      this.dims[5] +\n      \", \" +\n      this.dims[6] +\n      \", \" +\n      this.dims[7] +\n      \"\\n\";\n\n    string +=\n      \"Intent Parameters (1-3): \" +\n      this.intent_p1 +\n      \", \" +\n      this.intent_p2 +\n      \", \" +\n      this.intent_p3 +\n      \"\\n\";\n\n    string +=\n      \"Voxel Dimensions (1-8): \" +\n      fmt(this.pixDims[0]) +\n      \", \" +\n      fmt(this.pixDims[1]) +\n      \", \" +\n      fmt(this.pixDims[2]) +\n      \", \" +\n      fmt(this.pixDims[3]) +\n      \", \" +\n      fmt(this.pixDims[4]) +\n      \", \" +\n      fmt(this.pixDims[5]) +\n      \", \" +\n      fmt(this.pixDims[6]) +\n      \", \" +\n      fmt(this.pixDims[7]) +\n      \"\\n\";\n\n    string += \"Image Offset = \" + this.vox_offset + \"\\n\";\n    string +=\n      \"Data Scale:  Slope = \" +\n      fmt(this.scl_slope) +\n      \"  Intercept = \" +\n      fmt(this.scl_inter) +\n      \"\\n\";\n    string +=\n      \"Display Range:  Max = \" +\n      fmt(this.cal_max) +\n      \"  Min = \" +\n      fmt(this.cal_min) +\n      \"\\n\";\n    string += \"Slice Duration = \" + this.slice_duration + \"\\n\";\n    string += \"Time Axis Shift = \" + this.toffset + \"\\n\";\n    string += \"Slice Start = \" + this.slice_start + \"\\n\";\n    string += \"Slice End = \" + this.slice_end + \"\\n\";\n    string += 'Description: \"' + this.description + '\"\\n';\n    string += 'Auxiliary File: \"' + this.aux_file + '\"\\n';\n    string +=\n      \"Q-Form Code = \" +\n      this.qform_code +\n      \" (\" +\n      this.getTransformCodeString(this.qform_code) +\n      \")\\n\";\n    string +=\n      \"S-Form Code = \" +\n      this.sform_code +\n      \" (\" +\n      this.getTransformCodeString(this.sform_code) +\n      \")\\n\";\n    string +=\n      \"Quaternion Parameters:  \" +\n      \"b = \" +\n      fmt(this.quatern_b) +\n      \"  \" +\n      \"c = \" +\n      fmt(this.quatern_c) +\n      \"  \" +\n      \"d = \" +\n      fmt(this.quatern_d) +\n      \"\\n\";\n\n    string +=\n      \"Quaternion Offsets:  \" +\n      \"x = \" +\n      this.qoffset_x +\n      \"  \" +\n      \"y = \" +\n      this.qoffset_y +\n      \"  \" +\n      \"z = \" +\n      this.qoffset_z +\n      \"\\n\";\n\n    string +=\n      \"S-Form Parameters X: \" +\n      fmt(this.affine[0][0]) +\n      \", \" +\n      fmt(this.affine[0][1]) +\n      \", \" +\n      fmt(this.affine[0][2]) +\n      \", \" +\n      fmt(this.affine[0][3]) +\n      \"\\n\";\n\n    string +=\n      \"S-Form Parameters Y: \" +\n      fmt(this.affine[1][0]) +\n      \", \" +\n      fmt(this.affine[1][1]) +\n      \", \" +\n      fmt(this.affine[1][2]) +\n      \", \" +\n      fmt(this.affine[1][3]) +\n      \"\\n\";\n\n    string +=\n      \"S-Form Parameters Z: \" +\n      fmt(this.affine[2][0]) +\n      \", \" +\n      fmt(this.affine[2][1]) +\n      \", \" +\n      fmt(this.affine[2][2]) +\n      \", \" +\n      fmt(this.affine[2][3]) +\n      \"\\n\";\n\n    string += \"Slice Code = \" + this.slice_code + \"\\n\";\n    string +=\n      \"Units Code = \" +\n      this.xyzt_units +\n      \" (\" +\n      this.getUnitsCodeString(NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) +\n      \", \" +\n      this.getUnitsCodeString(NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) +\n      \")\\n\";\n    string += \"Intent Code = \" + this.intent_code + \"\\n\";\n    string += 'Intent Name: \"' + this.intent_name + '\"\\n';\n\n    string += \"Dim Info = \" + this.dim_info + \"\\n\";\n\n    return string;\n  }\n\n  /**\n   * Returns the byte index of the extension.\n   * @returns {number}\n   */\n  getExtensionLocation = function () {\n    return NIFTI2.MAGIC_COOKIE + 4;\n  };\n\n  /**\n   * Returns the extension size.\n   * @param {DataView} data\n   * @returns {number}\n   */\n  getExtensionSize = NIFTI1.prototype.getExtensionSize;\n\n  /**\n   * Returns the extension code.\n   * @param {DataView} data\n   * @returns {number}\n   */\n  getExtensionCode = NIFTI1.prototype.getExtensionCode;\n\n  /**\n   * Adds an extension\n   * @param {NIFTIEXTENSION} extension\n   * @param {number} index\n   */\n  addExtension = NIFTI1.prototype.addExtension;\n\n  /**\n   * Removes an extension\n   * @param {number} index\n   */\n  removeExtension = NIFTI1.prototype.removeExtension;\n\n  /**\n   * Returns a human-readable string of datatype.\n   * @param {number} code\n   * @returns {string}\n   */\n  getDatatypeCodeString = NIFTI1.prototype.getDatatypeCodeString;\n\n  /**\n   * Returns a human-readable string of transform type.\n   * @param {number} code\n   * @returns {string}\n   */\n  getTransformCodeString = NIFTI1.prototype.getTransformCodeString;\n\n  /**\n   * Returns a human-readable string of spatial and temporal units.\n   * @param {number} code\n   * @returns {string}\n   */\n  getUnitsCodeString = NIFTI1.prototype.getUnitsCodeString;\n\n  /**\n   * Returns the qform matrix.\n   * @returns {Array.<Array.<number>>}\n   */\n  getQformMat = NIFTI1.prototype.getQformMat;\n\n  /**\n   * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n   * @param {number} qb\n   * @param {number} qc\n   * @param {number} qd\n   * @param {number} qx\n   * @param {number} qy\n   * @param {number} qz\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dz\n   * @param {number} qfac\n   * @returns {Array.<Array.<number>>}\n   */\n  convertNiftiQFormToNiftiSForm =\n    NIFTI1.prototype.convertNiftiQFormToNiftiSForm;\n\n  /**\n   * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n   * @param {Array.<Array.<number>>} R\n   * @returns {string}\n   */\n  convertNiftiSFormToNEMA = NIFTI1.prototype.convertNiftiSFormToNEMA;\n\n  nifti_mat33_mul = NIFTI1.prototype.nifti_mat33_mul;\n\n  nifti_mat33_determ = NIFTI1.prototype.nifti_mat33_determ;\n\n  /**\n   * Returns header as ArrayBuffer.\n   * @param {boolean} includeExtensions - should extension bytes be included\n   * @returns {ArrayBuffer}\n   */\n  toArrayBuffer(includeExtensions = false) {\n    const INT64_SIZE = 8;\n    const DOUBLE_SIZE = 8;\n\n    let byteSize = 540 + 4; // +4 for extension bytes\n    // calculate necessary size\n    if (includeExtensions) {\n      for (let extension of this.extensions) {\n        byteSize += extension.esize;\n      }\n    }\n\n    let byteArray = new Uint8Array(byteSize);\n    let view = new DataView(byteArray.buffer);\n    // sizeof_hdr\n    view.setInt32(0, 540, this.littleEndian);\n\n    // magic\n    byteArray.set(Buffer.from(this.magic), 4);\n\n    // datatype\n    view.setInt16(12, this.datatypeCode, this.littleEndian);\n\n    // bitpix\n    view.setInt16(14, this.numBitsPerVoxel, this.littleEndian);\n\n    // dim[8]\n    for (let i = 0; i < 8; i++) {\n      view.setBigInt64(\n        16 + INT64_SIZE * i,\n        BigInt(this.dims[i]),\n        this.littleEndian\n      );\n    }\n\n    // intent_p1\n    view.setFloat64(80, this.intent_p1, this.littleEndian);\n\n    // intent_p2\n    view.setFloat64(88, this.intent_p2, this.littleEndian);\n\n    // intent_p3\n    view.setFloat64(96, this.intent_p3, this.littleEndian);\n\n    // pixdim\n    for (let i = 0; i < 8; i++) {\n      view.setFloat64(\n        104 + DOUBLE_SIZE * i,\n        this.pixDims[i],\n        this.littleEndian\n      );\n    }\n\n    // vox_offset\n    view.setBigInt64(168, BigInt(this.vox_offset), this.littleEndian);\n\n    // scl_slope\n    view.setFloat64(176, this.scl_slope, this.littleEndian);\n\n    // scl_inter\n    view.setFloat64(184, this.scl_inter, this.littleEndian);\n\n    // cal_max\n    view.setFloat64(192, this.cal_max, this.littleEndian);\n\n    // cal_min\n    view.setFloat64(200, this.cal_min, this.littleEndian);\n\n    // slice_duration\n    view.setFloat64(208, this.slice_duration, this.littleEndian);\n\n    // toffset\n    view.setFloat64(216, this.toffset, this.littleEndian);\n\n    // slice_start\n    view.setBigInt64(224, BigInt(this.slice_start), this.littleEndian);\n\n    // slice end\n    view.setBigInt64(232, BigInt(this.slice_end), this.littleEndian);\n\n    // descrip\n    byteArray.set(Buffer.from(this.description), 240);\n\n    // aux_file\n    byteArray.set(Buffer.from(this.aux_file), 320);\n\n    // qform_code\n    view.setInt32(344, this.qform_code, this.littleEndian);\n\n    // sform_code\n    view.setInt32(348, this.sform_code, this.littleEndian);\n\n    // quatern_b\n    view.setFloat64(352, this.quatern_b, this.littleEndian);\n\n    // quatern_c\n    view.setFloat64(360, this.quatern_c, this.littleEndian);\n\n    // quatern_d\n    view.setFloat64(368, this.quatern_d, this.littleEndian);\n\n    // qoffset_x\n    view.setFloat64(376, this.qoffset_x, this.littleEndian);\n\n    // qoffset_y\n    view.setFloat64(384, this.qoffset_y, this.littleEndian);\n\n    // qoffset_z\n    view.setFloat64(392, this.qoffset_z, this.littleEndian);\n\n    // srow_x[4], srow_y[4], and srow_z[4]\n    const flattened = this.affine.flat();\n    // we only want the first three rows\n    for (let i = 0; i < 12; i++) {\n      view.setFloat64(400 + DOUBLE_SIZE * i, flattened[i], this.littleEndian);\n    }\n\n    // slice_code\n    view.setInt32(496, this.slice_code, this.littleEndian);\n    //  xyzt_units\n    view.setInt32(500, this.xyzt_units, this.littleEndian);\n    //  intent_code\n    view.setInt32(504, this.intent_code, this.littleEndian);\n    //  intent_name\n    byteArray.set(Buffer.from(this.intent_name), 508);\n    // dim_info\n    view.setUint8(524, this.dim_info);\n\n    // add our extension data\n    if (includeExtensions) {\n      byteArray.set(Uint8Array.from([1, 0, 0, 0]), 540);\n      let extensionByteIndex = this.getExtensionLocation();\n      for (const extension of this.extensions) {\n        view.setInt32(\n          extensionByteIndex,\n          extension.esize,\n          extension.littleEndian\n        );\n        view.setInt32(\n          extensionByteIndex + 4,\n          extension.ecode,\n          extension.littleEndian\n        );\n        byteArray.set(new Uint8Array(extension.edata), extensionByteIndex + 8);\n        extensionByteIndex += extension.esize;\n      }\n    } else {\n      // In a .nii file, these 4 bytes will always be present\n      byteArray.set(new Uint8Array(4).fill(0), 540);\n    }\n\n    return byteArray.buffer;\n  }\n}", "import * as fflate from \"fflate\";\nimport { NIFTI1 } from \"./nifti1\";\nimport { NIFTI2 } from \"./nifti2\";\nimport { Utils } from \"./utilities\";\nexport { NIFTI1 } from \"./nifti1\";\nexport { NIFTI2 } from \"./nifti2\";\nexport { Utils } from \"./utilities\";\nexport { NIFTIEXTENSION } from \"./nifti-extension\";\n\n  /*** Static Methods ***/    \n  /**\n   * Returns true if this data represents a NIFTI-1 header.\n   * @param {ArrayBuffer} data\n   * @returns {boolean}\n   */\n  export function isNIFTI1(data: ArrayBuffer, isHdrImgPairOK = false) {\n    var buf, mag1, mag2, mag3;\n    \n    if (data.byteLength < NIFTI1.STANDARD_HEADER_SIZE) {\n      return false;\n    }\n\n    buf = new DataView(data);\n\n    if (buf) mag1 = buf.getUint8(NIFTI1.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(NIFTI1.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(NIFTI1.MAGIC_NUMBER_LOCATION + 2);\n\n    if (\n      isHdrImgPairOK &&\n      mag1 === NIFTI1.MAGIC_NUMBER2[0] &&\n      mag2 === NIFTI1.MAGIC_NUMBER2[1] &&\n      mag3 === NIFTI1.MAGIC_NUMBER2[2]\n    )\n      return true; // hdr/img pair\n\n    return !!(\n      mag1 === NIFTI1.MAGIC_NUMBER[0] &&\n      mag2 === NIFTI1.MAGIC_NUMBER[1] &&\n      mag3 === NIFTI1.MAGIC_NUMBER[2]\n    );\n  }\n\n  /**\n   * Returns true if this data represents a NIFTI-2 header.\n   * @param {ArrayBuffer} data\n   * @returns {boolean}\n   */\n  export function isNIFTI2(data: ArrayBuffer, isHdrImgPairOK = false) {\n    var buf, mag1, mag2, mag3;\n\n    if (data.byteLength < NIFTI1.STANDARD_HEADER_SIZE) {\n      return false;\n    }\n\n    buf = new DataView(data);\n    mag1 = buf.getUint8(NIFTI2.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(NIFTI2.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(NIFTI2.MAGIC_NUMBER_LOCATION + 2);\n\n    if (\n      isHdrImgPairOK &&\n      mag1 === NIFTI2.MAGIC_NUMBER2[0] &&\n      mag2 === NIFTI2.MAGIC_NUMBER2[1] &&\n      mag3 === NIFTI2.MAGIC_NUMBER2[2]\n    )\n      return true; // hdr/img pair\n\n    return !!(\n      mag1 === NIFTI2.MAGIC_NUMBER[0] &&\n      mag2 === NIFTI2.MAGIC_NUMBER[1] &&\n      mag3 === NIFTI2.MAGIC_NUMBER[2]\n    );\n  }\n\n  /**\n   * Returns true if this data represents a NIFTI header.\n   * @param {ArrayBuffer} data\n   * @returns {boolean}\n   */\n  export function isNIFTI(data: ArrayBuffer, isHdrImgPairOK = false) {\n    return (\n      isNIFTI1(data, isHdrImgPairOK) ||\n      isNIFTI2(data, isHdrImgPairOK)\n    );\n  }\n\n  /**\n   * Returns true if this data is GZIP compressed.\n   * @param {ArrayBuffer} data\n   * @returns {boolean}\n   */\n  export function isCompressed(data: ArrayBuffer) {\n    var buf, magicCookie1, magicCookie2;\n\n    if (data) {\n      buf = new DataView(data);\n\n      magicCookie1 = buf.getUint8(0);\n      magicCookie2 = buf.getUint8(1);\n\n      if (magicCookie1 === Utils.GUNZIP_MAGIC_COOKIE1) {\n        return true;\n      }\n\n      if (magicCookie2 === Utils.GUNZIP_MAGIC_COOKIE2) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns decompressed data.\n   * @param {ArrayBuffer} data\n   * @returns {ArrayBuffer}\n   */\n  export function decompress(data: ArrayBuffer) {\n    return fflate.decompressSync(new Uint8Array(data)).buffer;\n  }\n\n  /**\n   * Reads and returns the header object.\n   * @param {ArrayBuffer} data\n   * @returns {NIFTI1|NIFTI2|null}\n   */\n  export function readHeader(data: ArrayBuffer, isHdrImgPairOK = false) {\n    var header = null;\n\n    if (isCompressed(data)) {\n      data = decompress(data);\n    }\n\n    if (isNIFTI1(data, isHdrImgPairOK)) {\n      header = new NIFTI1();\n    } else if (isNIFTI2(data, isHdrImgPairOK)) {\n      header = new NIFTI2();\n    }\n\n    if (header) {\n      header.readHeader(data);\n    } else {\n      console.error(\"That file does not appear to be NIFTI!\");\n    }\n\n    return header;\n  }\n\n  /**\n   * Returns true if this header contains an extension.\n   * @param {NIFTI1|NIFTI2} header\n   * @returns {boolean}\n   */\n  export function hasExtension(header: NIFTI1 | NIFTI2) {\n    return header.extensionFlag[0] != 0;\n  }\n\n  /**\n   * Returns the image data.\n   * @param {NIFTI1|NIFTI2} header\n   * @param {ArrayBuffer} data\n   * @returns {ArrayBuffer}\n   */\n  export function readImage(\n    header: NIFTI1 | NIFTI2,\n    data: ArrayBuffer\n  ) {\n    var imageOffset = header.vox_offset,\n      timeDim = 1,\n      statDim = 1;\n\n    if (header.dims[4]) {\n      timeDim = header.dims[4];\n    }\n\n    if (header.dims[5]) {\n      statDim = header.dims[5];\n    }\n\n    var imageSize =\n      header.dims[1] *\n      header.dims[2] *\n      header.dims[3] *\n      timeDim *\n      statDim *\n      (header.numBitsPerVoxel / 8);\n    return data.slice(imageOffset, imageOffset + imageSize);\n  }\n\n  /**\n   * Returns the extension data (including extension header).\n   * @param {NIFTI1|NIFTI2} header\n   * @param {ArrayBuffer} data\n   * @returns {ArrayBuffer}\n   */\n  export function readExtension(\n    header: NIFTI1 | NIFTI2,\n    data: ArrayBuffer\n  ) {\n    var loc = header.getExtensionLocation(),\n      size = header.extensionSize;\n\n    return data.slice(loc, loc + size);\n  }\n\n  /**\n   * Returns the extension data.\n   * @param {NIFTI1|NIFTI2} header\n   * @param {ArrayBuffer} data\n   * @returns {ArrayBuffer}\n   */\n  export function readExtensionData(\n    header: NIFTI1 | NIFTI2,\n    data: ArrayBuffer\n  ) {\n    var loc = header.getExtensionLocation(),\n      size = header.extensionSize;\n\n    return data.slice(loc + 8, loc + size); // +8 for loc and -8 for esize and ecode\n  }\n"],
  "mappings": "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",
  "names": ["err", "i", "l", "i2", "_a", "_b", "td", "dat", "fl", "Deflate", "AsyncDeflate", "Inflate", "AsyncInflate", "Gzip", "AsyncGzip", "Gunzip", "AsyncGunzip", "Zlib", "AsyncZlib", "Unzlib", "AsyncUnzlib", "Decompress", "AsyncDecompress", "DecodeUTF8", "EncodeUTF8", "ZipPassThrough", "ZipDeflate", "AsyncZipDeflate", "Zip", "UnzipPassThrough", "UnzipInflate", "AsyncUnzipInflate", "Unzip", "final", "e"]
}
